import java.util.*;
/*
문제에서 순간이동은 현재 위치를 "2배로 늘리는 이동"이라고 정의되어 있습니다. 순간이동 자체에 "짝수에서만 가능하다"는 제약이 명시된 것은 아닙니다. 그러나 순간이동이 실제로 동작하려면 현재 위치가 짝수여야만 유효하게 작동하기 때문에, 결국 다음과 같은 이유로 홀수일 때는 점프가 필요합니다.

1. 순간이동이 유효하려면 짝수여야 하는 이유.
순간이동은 현재 위치 N을 "2배로 이동"하는 방식임로 순간이동 전의 위치가 짝수라면 ?
- 짝수 N은 N/2로 정확히 나뉘어진다.
- 이 과정에서 건전지 소모 없이 N/2로 이동할 수 있다.
그러나 홀수 N 인 경우?
- N/2는 소수점이 발생하므로, N에서 정확히 절반으로 순간이동할 수 없다.
- 따라서 순간이동이 의미를 가지려면 N을 먼저 짝수로 만들어야 한다.

왜 이 접근법이 그리디한 풀이인가?
1. 순간이동은 건전지 소모가 없으므로 최대한 순간이동을 많이 활용해야 한다.
2. 순간이동을 하기 위해서는 N이 짝수여야 하므로 홀수를 짝수로 만드는 작업은 필수적이다.
3. 홀수를 짝수로 만들려면 점프 1번이 유일한 선택지다.

순간이동을 짝수에서 했을때 최적의 풀이가 되기 때문에 현재 위치를 절반으로 나누는 과정을 짝수에서 수행하는 것 이다.

1. 짝수 상태로 변환하기 위해서는 점프가 필요하다.
2. 이는 문제의 건전지 소모 최소화 조건을 만족한다.

*/
public class Solution {

    public int solution(int n) {
        
        int batteryUsage = 0;
        
        while (n > 0){
            
            // n이 홀수 일 경우 점프를해서 이동
            if (n % 2 == 1){
                batteryUsage++;
                n--; 
            } else {
                // n이 짝수일 경우 순간이동으로 거리를 절반으로 줄이기
                n /= 2;
            }
            
        }
        
        return batteryUsage;
    }
}